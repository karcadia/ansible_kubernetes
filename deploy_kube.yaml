---
- hosts: all
  vars:
    container_runtime: cri-o 
    kube_dns_domain: kube.mccormicom.com
    cni_plugin: flannel 
    pod_network_cidr: 10.244.0.0/16
    install_basic_tools: no 
    kubeadm_reset: yes
  become: yes
  tasks:
    - name: Check assertions.
      assert:
        that:
          - ansible_distribution == "Debian" and ansible_distribution_major_version|int > 9
          - container_runtime == "docker" or container_runtime == "containerd" or container_runtime == "cri-o"
          - cni_plugin == "flannel" or cni_plugin == "calico"

# Prework
    - name: Let iptables see bridged traffic
      copy:
        dest: /etc/modules-load.d/k8s.conf
        content: "br_netfilter"

#    - name: Load overlay module for containerd.

    - name: Manaully load br_netfilter once.
      shell:
        cmd: lsmod | grep br_netfilter || modprobe br_netfilter

    - name: Configure sysctl.
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes

    - name: Disable swap permanently.
      mount:
        fstype: swap
        path: none
        state: absent

    - name: Disable swap now.
      command: swapoff -a

    - name: Install basic tools.
      package:
        name: "{{ item }}"
      loop:
        - vim
        - sudo
        - curl
      when:
        - install_basic_tools

    - name: Install required packages.
      package:
        name: "{{ item }}"
      loop:
        - apt-transport-https
        - ca-certificates
        - gnupg

# Repos
    - name: Configure Kubernetes apt source.
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" 

    - name: Deploy keys for Kubernetes apt source.
      get_url:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        dest: /usr/share/keyrings/kubernetes-archive-keyring.gpg

#    - name: Configure repo for docker.io package. Might be needed for Debian 10 but not Debian 11. 

    - name: Configure repos for cri-o.
      copy:
        dest: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
        content: "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_Testing/ /"
      when:
        - container_runtime is defined
        - container_runtime|lower == "crio" or container_runtime|lower == "cri-o"
        - ansible_distribution == "Debian" and ansible_distribution_major_version|int > 9

    - name: Configure repos for cri-o 1.21.
      copy:
        dest: /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:1.21.list 
        content: "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/1.21/Debian_Testing/ /"
      when:
        - container_runtime is defined
        - container_runtime|lower == "crio" or container_runtime|lower == "cri-o"
        - ansible_distribution == "Debian" and ansible_distribution_major_version|int > 9

    - name: Drop in apt keys for cri-o.
      shell:
        cmd: "echo 'mQENBFtkV0cBCADStSTCG5qgYtzmWfymHZqxxhfwfS6fdHJcbGUeXsI5dxjeCWhsXarZm6rWZOd5WfSmpXhbKOyM6Ll+6bpSl5ICHLa6fcpizYWEPa8fpg9EGl0cF12GGgVLnnOZ6NIbsoW0LHt2YN0jn8xKVwyPp7KLHB2paZh+KuURERG406GXY/DgCxUxFfgdelym/gfmt3DSq6GAQRRGHyucMvPYm53r+jVcKsf2Bp6E1XAfqBrD5r0maaCUWvd7bi0B2Q0hIX0rfDCBpl4rFqvyaMPgn+Bkl6IW37zCkWIXqf1E5eDm/XzP881s+yAvi+JfDwt7AE+Hd2dSf273o3WUdYJGRwyZABEBAAGwDAAAZ3BnAQAAAAAAALQ4ZGV2ZWw6a3ViaWMgT0JTIFByb2plY3QgPGRldmVsOmt1YmljQGJ1aWxkLm9wZW5zdXNlLm9yZz6wDAAAZ3BnAgAAAAAAAIkBPgQTAQgAKAUCX3CSTgIbAwUJCCrrBwYLCQgHAwIGFQgCCQoLBBYCAwECHgECF4AACgkQTWQ5A3UGCqQdMQgAprQk+q7j4kGuJdAxKbWfrtzTW2X0lRh+HxOIck4y286wsanKIcSbwysbKbifOcFhVjLZee/pRRRNSj9AF9l00/v79rzdTyH8IDksN8qdrIFriFxQIvPWEo0ofBtEhgB/dAPWBTJ025ZcxqBlEY0l9N4mrFtwONPJY2w3oQOq6Ut7dxQ+zz51BettOKK2LtNEL3OeGp/8VSc8bqW+vTCluRHiu8fDCZyE6E/ISHTnRlQ+msbIrMftVO9aDCtYAZHu6eED1HYSRaUlHepE/G3Dvu62KLqJYxTWJFH8J6rVJ++duX5H4Lg6ql7ziTKSf7CtWoxznnoaeU+EOOS/6lAm97AGAANncGcAiEYEExECAAYFAltkV0cACgkQOzARt2udZSOoswCdF44NTN09DwhPFbNYhEMb9juP5ykAn0bcELvuKmgDwEwZMrPQkG8tPu9nsAYAAGdwZwA=' | base64 -d > /etc/apt/trusted.gpg.d/crio.gpg"
      when:
        - container_runtime is defined
        - container_runtime|lower == "crio" or container_runtime|lower == "cri-o"
        - ansible_distribution == "Debian" and ansible_distribution_major_version|int > 9

# Packages
    - name: Update apt cache.
      apt:
        update_cache: yes

    - name: Install kubernetes packages.
      package:
        name: "{{ item }}"
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Install docker.io package.
      package:
        name: docker.io
      when:
        - container_runtime is defined
        - container_runtime|lower == "docker" or container_runtime|lower == "docker.io"

    - name: Install containerd package.
      package:
        name: containerd
      when:
        - container_runtime is defined
        - container_runtime|lower == "containerd" or container_runtime|lower == "containerd.io"

    - name: Install cri-o packages.
      package:
        name: "{{item}}" 
      when:
        - container_runtime is defined
        - container_runtime|lower == "crio" or container_runtime|lower == "cri-o"
      loop:
        - cri-o
        - cri-o-runc

    - name: Enable and start cri-o if selected.
      service:
        name: crio
        state: started
        enabled: yes
      when:
        - container_runtime is defined
        - container_runtime|lower == "crio" or container_runtime|lower == "cri-o"

#    - name: Create symlink for containerd.
#      file:
#        src: /opt/cni/bin
#        dest: /var/lib/cni
#        state: link
#      when:
#        - container_runtime is defined
#        - container_runtime|lower == "containerd"

#    - name: Configure containerd.
#      lineinfile:
#        path: /etc/containerd/config.toml
#        regex: '^      bin_dir'
#        line: '      bin_dir = "/opt/cni/bin/"'
#      when:
#        - container_runtime is defined
#        - container_runtime|lower == "containerd"

#    - name: Configure flannel for containerd.
#      copy:
#        dest: /run/flannel/subnet.env
#        content: |
#                 FLANNEL_NETWORK=10.44.0.0/16
#                 FLANNEL_SUBNET=10.44.0.1/24
#                 FLANNEL_MTU=1450
#                 FLANNEL_IPMASQ=true
#      when:
#        - container_runtime is defined
#        - container_runtime|lower == "containerd"
#        - cni_plugin is defined
#        - cni_plugin|lower == "flannel"

#root@kube07:~# cat /run/flannel/subnet.env
#FLANNEL_NETWORK=10.44.0.0/16
#FLANNEL_SUBNET=10.44.0.1/24
#FLANNEL_MTU=1450
#FLANNEL_IPMASQ=true

    - name: Refresh facts.
      set_fact:
        container_runtime: "{{container_runtime}}"
        kube_dns_domain: "{{kube_dns_domain}}"
        cni_plugin: "{{cni_plugin}}"
        pod_network_cidr: "{{pod_network_cidr}}"
        kubeadm_reset: "{{kubeadm_reset}}"

- hosts: all
  become: yes
  tasks:
    - name: Reset kubeadm if requested.
      command: kubeadm reset -f
      when: kubeadm_reset
      failed_when: false

- hosts: masters
  become: yes
  tasks:
    - name: Initialize Kubernetes stack.
      run_once: True 
      command: "kubeadm init --service-dns-domain {{ kube_dns_domain }} --pod-network-cidr {{ pod_network_cidr }}"
      register: kubeadm_init

    - name: Extract our token hash.
      set_fact:
        kubeadm_token_hash_tmp: "{{kubeadm_init.stdout_lines|last}}"

    - name: Continue extracting token hash.
      set_fact:
        kubeadm_token_hash: "{{kubeadm_token_hash_tmp | regex_search('sha256:[a-z0-9]+')}}"

    - name: Pull our node registration token.
      shell:
        cmd: "kubeadm token list | tail -1 | awk '{print $1}'"
      register: kubeadm_token

    - name: Wait for kubectl to start responding.
      wait_for:
        host: localhost 
        port: 6443

    - name: Initialize CNI Plugin (flannel)
      shell:
        cmd: kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when:
        - cni_plugin is defined
        - cni_plugin|lower == "flannel"

    - name: Initialize CNI Plugin (calico)
      shell:
        cmd: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml 
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      when:
        - cni_plugin is defined
        - cni_plugin|lower == "calico"

    - name: Wait for kubectl to start responding.
      wait_for:
        host: localhost
        port: 6443

    - name: Store variables for next play.
      add_host:
        hostname: dummy
        kubeadm_token: "{{kubeadm_token.stdout}}"
        kubeadm_token_hash: "{{kubeadm_token_hash}}"
        master_ip: "{{ansible_default_ipv4.address}}"

- hosts: workers
  become: yes
  tasks:
    - name: Check assertions.
      assert:
        that:
          - hostvars['dummy']['kubeadm_token'] is defined
          - hostvars['dummy']['kubeadm_token_hash'] is defined
          - hostvars['dummy']['master_ip'] is defined

    - name: Join the cluster.
      command: "kubeadm join {{hostvars['dummy']['master_ip']}}:6443 --token {{hostvars['dummy']['kubeadm_token']}} --discovery-token-ca-cert-hash {{hostvars['dummy']['kubeadm_token_hash']}}"

- hosts: masters
  become: yes
  run_once: true
  tasks:
    - name: Generate a list of worker nodes.
      shell:
        cmd: "kubectl get node | grep '<none>' | awk '{print $1}' | sort"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: kube_workers

    - name: Assign etcd role to first worker.
      command: "kubectl label node {{kube_workers.stdout_lines | first}} node-role.kubernetes.io/etcd="
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf

    - name: Assign worker role to all workers.
      command: "kubectl label node {{item}} node-role.kubernetes.io/worker="
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      loop: "{{kube_workers.stdout_lines}}"

    - name: Start up a test workload to ensure everything is working as expected.
      command: "kubectl run --image nginx nginx"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
